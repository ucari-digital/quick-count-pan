(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Palette"] = factory();
	else
		root["ColorPicker"] = root["ColorPicker"] || {}, root["ColorPicker"]["Palette"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/ts/palette-picker.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/deepmerge/dist/umd.js":
/*!********************************************!*\
  !*** ./node_modules/deepmerge/dist/umd.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("(function (global, factory) {\n\t true ? module.exports = factory() :\n\tundefined;\n}(this, (function () { 'use strict';\n\nvar isMergeableObject = function isMergeableObject(value) {\n\treturn isNonNullObject(value)\n\t\t&& !isSpecial(value)\n};\n\nfunction isNonNullObject(value) {\n\treturn !!value && typeof value === 'object'\n}\n\nfunction isSpecial(value) {\n\tvar stringValue = Object.prototype.toString.call(value);\n\n\treturn stringValue === '[object RegExp]'\n\t\t|| stringValue === '[object Date]'\n\t\t|| isReactElement(value)\n}\n\n// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25\nvar canUseSymbol = typeof Symbol === 'function' && Symbol.for;\nvar REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;\n\nfunction isReactElement(value) {\n\treturn value.$$typeof === REACT_ELEMENT_TYPE\n}\n\nfunction emptyTarget(val) {\n\treturn Array.isArray(val) ? [] : {}\n}\n\nfunction cloneUnlessOtherwiseSpecified(value, optionsArgument) {\n\tvar clone = !optionsArgument || optionsArgument.clone !== false;\n\n\treturn (clone && isMergeableObject(value))\n\t\t? deepmerge(emptyTarget(value), value, optionsArgument)\n\t\t: value\n}\n\nfunction defaultArrayMerge(target, source, optionsArgument) {\n\treturn target.concat(source).map(function(element) {\n\t\treturn cloneUnlessOtherwiseSpecified(element, optionsArgument)\n\t})\n}\n\nfunction mergeObject(target, source, optionsArgument) {\n\tvar destination = {};\n\tif (isMergeableObject(target)) {\n\t\tObject.keys(target).forEach(function(key) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(target[key], optionsArgument);\n\t\t});\n\t}\n\tObject.keys(source).forEach(function(key) {\n\t\tif (!isMergeableObject(source[key]) || !target[key]) {\n\t\t\tdestination[key] = cloneUnlessOtherwiseSpecified(source[key], optionsArgument);\n\t\t} else {\n\t\t\tdestination[key] = deepmerge(target[key], source[key], optionsArgument);\n\t\t}\n\t});\n\treturn destination\n}\n\nfunction deepmerge(target, source, optionsArgument) {\n\tvar sourceIsArray = Array.isArray(source);\n\tvar targetIsArray = Array.isArray(target);\n\tvar options = optionsArgument || { arrayMerge: defaultArrayMerge };\n\tvar sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;\n\n\tif (!sourceAndTargetTypesMatch) {\n\t\treturn cloneUnlessOtherwiseSpecified(source, optionsArgument)\n\t} else if (sourceIsArray) {\n\t\tvar arrayMerge = options.arrayMerge || defaultArrayMerge;\n\t\treturn arrayMerge(target, source, optionsArgument)\n\t} else {\n\t\treturn mergeObject(target, source, optionsArgument)\n\t}\n}\n\ndeepmerge.all = function deepmergeAll(array, optionsArgument) {\n\tif (!Array.isArray(array)) {\n\t\tthrow new Error('first argument should be an array')\n\t}\n\n\treturn array.reduce(function(prev, next) {\n\t\treturn deepmerge(prev, next, optionsArgument)\n\t}, {})\n};\n\nvar deepmerge_1 = deepmerge;\n\nreturn deepmerge_1;\n\n})));\n\n\n//# sourceURL=webpack://ColorPicker.Palette/./node_modules/deepmerge/dist/umd.js?");

/***/ }),

/***/ "./src/ts/model/color.ts":
/*!*******************************!*\
  !*** ./src/ts/model/color.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsdom_1 = __webpack_require__(/*! ./tsdom */ \"./src/ts/model/tsdom.ts\");\nvar Color = /** @class */ (function () {\n    function Color(color) {\n        this.color = color;\n        this.normalize();\n    }\n    Color.prototype.normalize = function () {\n        var opacity = 1;\n        if (this.color.match(/^rgba/g)) {\n            var tmpColor = this.color.split(\"(\")[1].split(\")\")[0].split(\",\");\n            this.color = 'rgb(' + tmpColor[0] + ', ' + tmpColor[1] + ', ' + tmpColor[2] + ')';\n            opacity = +tmpColor[3];\n        }\n        var tmpCanvas = tsdom_1.TsDom.create('canvas'), tmpCanvasContext = tmpCanvas.get().getContext('2d');\n        tmpCanvasContext.clearRect(0, 0, 1, 1);\n        tmpCanvasContext.fillStyle = this.color;\n        tmpCanvasContext.fillRect(0, 0, 1, 1);\n        var imgData = tmpCanvasContext.getImageData(0, 0, 1, 1).data, r = imgData[0], g = imgData[1], b = imgData[2];\n        var rgb = b | (g << 8) | (r << 16); // hex\n        var hsla = this.rgbaToHsla(r, g, b, opacity);\n        this.rgb = 'rgb(' + r + ', ' + g + ', ' + b + ')';\n        this.rgba = 'rgba(' + r + ', ' + g + ', ' + b + ', ' + opacity + ')';\n        this.hex = '#' + (0x1000000 + rgb).toString(16).slice(1);\n        this.hsl = 'hsl(' + hsla.h + ', ' + hsla.s + '%, ' + hsla.l + '%)';\n        this.hsla = 'hsla(' + hsla.h + ', ' + hsla.s + '%, ' + hsla.l + '%, ' + opacity + ')';\n        this.source = {\n            rgba: {\n                r: r,\n                g: g,\n                b: b,\n                a: opacity\n            },\n            hsla: {\n                h: hsla.h,\n                s: hsla.s,\n                l: hsla.l,\n                a: hsla.a\n            }\n        };\n    };\n    Color.prototype.format = function (format) {\n        if (format === 'rgb') {\n            return this.rgb;\n        }\n        else if (format === 'rgba') {\n            return this.rgba;\n        }\n        else if (format === 'hex') {\n            return this.hex;\n        }\n        else if (format === 'hsl') {\n            return this.hsl;\n        }\n        else if (format === 'hsla') {\n            return this.hsla;\n        }\n        else if (format === 'source') {\n            return this.source;\n        }\n        return this.hex;\n    };\n    Color.prototype.setOpacity = function (opacity) {\n        this.rgba = 'rgba(' + this.source.rgba.r + ', ' + this.source.rgba.g + ', ' + this.source.rgba.b + ', ' + opacity + ')';\n        this.hsla = 'hsla(' + this.source.hsla.h + ', ' + this.source.hsla.s + '%, ' + this.source.hsla.l + '%, ' + opacity + ')';\n        this.source.rgba.a = opacity;\n        this.source.hsla.a = opacity;\n    };\n    Color.prototype.isValid = function () {\n        return !(this.hex === '#000000' && (this.color !== '#000' && this.color !== '#000000' && this.color !== 'black'));\n    };\n    Color.prototype.rgbaToHsla = function (r, g, b, a) {\n        r /= 255, g /= 255, b /= 255;\n        var max = Math.max(r, g, b), min = Math.min(r, g, b);\n        var h, s, l = (max + min) / 2;\n        if (max == min) {\n            h = s = 0; // achromatic\n        }\n        else {\n            var d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n            h /= 6;\n        }\n        return {\n            h: Math.ceil(h * 100),\n            s: Math.ceil(s * 100),\n            l: Math.ceil(l * 100),\n            a: a\n        };\n    };\n    Color.process = function (color) {\n        return new Color(color);\n    };\n    return Color;\n}());\nexports.Color = Color;\n\n\n//# sourceURL=webpack://ColorPicker.Palette/./src/ts/model/color.ts?");

/***/ }),

/***/ "./src/ts/model/colorpicker.ts":
/*!*************************************!*\
  !*** ./src/ts/model/colorpicker.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsdom_1 = __webpack_require__(/*! ./tsdom */ \"./src/ts/model/tsdom.ts\");\nvar deepmerge = __webpack_require__(/*! deepmerge */ \"./node_modules/deepmerge/dist/umd.js\");\nvar helper_1 = __webpack_require__(/*! ./helper */ \"./src/ts/model/helper.ts\");\nvar picker_position_1 = __webpack_require__(/*! ./picker-position */ \"./src/ts/model/picker-position.ts\");\nvar ColorPicker = /** @class */ (function () {\n    function ColorPicker(anchor, options) {\n        if (options === void 0) { options = {}; }\n        this.options = {\n            color: '',\n            inline: false,\n            placement: 'bottom',\n            format: 'rgba',\n            customClass: '',\n            size: 'default',\n            arrow: true,\n            anchor: {\n                hidden: false,\n                cssProperty: 'color' // background-color, color\n            },\n            animation: 'slide-in',\n            hideInfo: false,\n            history: {\n                hidden: false,\n                placeholdersAmount: 10,\n                colors: []\n            }\n        };\n        this.events = {\n            change: function (color) { }\n        };\n        var overwriteMerge = function (destinationArray, sourceArray, options) { return sourceArray; };\n        this.anchor = tsdom_1.TsDom.select(anchor);\n        this.id = 'colorpicker' + '-' + helper_1._uniqueId();\n        this.anchorId = this.id + '-anchor';\n        this.cssId = '#' + this.id;\n        this.cssAnchorId = '#' + this.anchorId;\n        this.options = deepmerge.all([this.options, this.getDefaultOptions(), ColorPicker.globalOptions, options], {\n            arrayMerge: overwriteMerge\n        });\n        this.document = tsdom_1.TsDom.select(document);\n        this.initPicker();\n        this.update();\n        this.initAnchor();\n    }\n    ColorPicker.prototype.setColor = function (color) {\n        this.options.color = color;\n        this.update();\n    };\n    ColorPicker.prototype.show = function () {\n        this.bindCommonEvents();\n        this.picker\n            .removeClass(this.options.animation)\n            .addClass(this.options.animation)\n            .addClass('is-opened')\n            .addClass('colorpicker--position-' + this.options.placement);\n        this.detectPickerPosition();\n    };\n    ColorPicker.prototype.hide = function () {\n        if (!this.picker.hasClass('is-opened')) {\n            return;\n        }\n        this.pickerPosition.destroy();\n        this.unBindCommonEvents();\n        this.picker.removeClass('is-opened');\n        this.anchor.get(0).blur(); // unfocus input\n    };\n    ColorPicker.prototype.destroy = function () {\n    };\n    ColorPicker.prototype.unBindCommonEvents = function () {\n        if (!this.options.inline) {\n            this.document.off('mousedown');\n        }\n    };\n    ColorPicker.prototype.on = function (eventName, eventCallback) {\n        this.events[eventName] = eventCallback;\n    };\n    ColorPicker.prototype.setAnchorCssProperty = function (cssProperty) {\n        this.options.anchor.cssProperty = cssProperty;\n    };\n    ColorPicker.prototype.setPlacement = function (placement) {\n        this.options.placement = placement;\n    };\n    ColorPicker.setGlobalOptions = function (options) {\n        ColorPicker.globalOptions = options;\n    };\n    ColorPicker.prototype.initPicker = function () {\n        this.buildLayout();\n        this.picker.addClass(this.getPickerCssClassName() + '--size-' + this.options.size);\n        // hide arrow on picker\n        if (!this.options.arrow) {\n            this.picker.addClass('colorpicker--no-arrow');\n        }\n        this.addCustomClass();\n        if (this.options.inline) {\n            if (this.anchor.parent().hasClass('colorpicker-input')) {\n                this.anchor.parent().insertAfter(this.picker);\n            }\n            else {\n                this.anchor.insertAfter(this.picker);\n            }\n            this.anchor.addClass('colorpicker-anchor--inline');\n            this.picker.addClass('colorpicker--inline');\n        }\n        else {\n            tsdom_1.TsDom.select('body').append(this.picker);\n        }\n        this.bindEvents();\n    };\n    ColorPicker.prototype.bindCommonEvents = function () {\n        var _this = this;\n        if (!this.options.inline) {\n            this.document.on('click', function (e) {\n                var picker = tsdom_1.TsDom.select(e.target).closest('.colorpicker');\n                if ((!picker.length() || picker.attr('id') !== _this.picker.attr('id')) && (e.target !== _this.anchor.get(0))) {\n                    _this.hide();\n                }\n            });\n        }\n    };\n    ColorPicker.prototype.initAnchor = function () {\n        var _this = this;\n        var self = this;\n        var callback = function (e) {\n            self.hideAllActivePickers();\n            self.show();\n            e.stopPropagation();\n        };\n        this.anchor.addClass('colorpicker-anchor');\n        if (this.options.anchor.hidden) {\n            this.anchor.hide();\n        }\n        if (this.anchor.is('input')) {\n            this.anchor\n                .val(self.getColor().toString())\n                .on('input', function (e) {\n                _this.setColor(_this.anchor.val());\n            });\n            var anchorInInput = this.anchor.parent().find('[data-color]');\n            if (anchorInInput.length()) {\n                anchorInInput.css('background', self.getColor());\n            }\n            if (!this.options.inline) {\n                this.anchor.on('focus', callback);\n            }\n        }\n        else {\n            if (this.anchor.find('[data-color]').length()) {\n                this.anchor\n                    .find('[data-color]')\n                    .css('background', self.getColor());\n            }\n            else {\n                this.anchor.css(self.options.anchor.cssProperty, self.getColor());\n            }\n            if (!this.options.inline) {\n                this.anchor.on('click', callback);\n            }\n        }\n        this.picker.on('colorpicker:color-change', function (e) {\n            if (self.options.hideAfterColorChange && !_this.options.inline) {\n                self.hide();\n            }\n            var dataColor = null;\n            _this.anchor.val(self.getColor().toString());\n            if (_this.anchor.parent().hasClass('colorpicker-input')) {\n                dataColor = _this.anchor.parent().find('[data-color]');\n            }\n            else {\n                dataColor = _this.anchor.find('[data-color]');\n            }\n            if (dataColor.length()) {\n                dataColor.css('background-color', self.getColor());\n            }\n            else {\n                if (!_this.anchor.is('input')) {\n                    _this.anchor.css(self.options.anchor.cssProperty, self.getColor());\n                }\n            }\n            _this.events['change'].apply(self, [self.getColorObject()]);\n        });\n        this.picker.on('colorpicker:hide', function (e) {\n            _this.hide();\n        });\n    };\n    ColorPicker.prototype.hideAllActivePickers = function () {\n        tsdom_1.TsDom\n            .select(\".colorpicker.is-opened:not(\" + this.cssId + \"):not(.colorpicker--inline)\")\n            .trigger('colorpicker:hide');\n    };\n    ColorPicker.prototype.addCustomClass = function () {\n        this.picker.addClass(this.options.customClass);\n    };\n    ColorPicker.prototype.detectPickerPosition = function () {\n        var _this = this;\n        this.pickerPosition = new picker_position_1.PickerPosition(this.anchor, this.picker, this.options.placement, this.options.arrow);\n        this.pickerPosition.process();\n        this.picker.on('colorpicker:refresh-position', function (e) {\n            _this.pickerPosition.process();\n        });\n    };\n    ColorPicker.prototype.dispatchColorChangedEvent = function () {\n        this.picker.trigger('colorpicker:color-change', {\n            color: this.getColor()\n        });\n    };\n    ColorPicker.prototype.dispatchRefreshPositionEvent = function () {\n        this.picker.trigger('colorpicker:refresh-position');\n    };\n    ColorPicker.globalOptions = {};\n    return ColorPicker;\n}());\nexports.ColorPicker = ColorPicker;\n\n\n//# sourceURL=webpack://ColorPicker.Palette/./src/ts/model/colorpicker.ts?");

/***/ }),

/***/ "./src/ts/model/helper.ts":
/*!********************************!*\
  !*** ./src/ts/model/helper.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction _uniqueId(idLength) {\n    if (idLength === void 0) { idLength = 16; }\n    return Math.random().toString(36).substr(2, idLength);\n}\nexports._uniqueId = _uniqueId;\n\n\n//# sourceURL=webpack://ColorPicker.Palette/./src/ts/model/helper.ts?");

/***/ }),

/***/ "./src/ts/model/picker-position.ts":
/*!*****************************************!*\
  !*** ./src/ts/model/picker-position.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tsdom_1 = __webpack_require__(/*! ./tsdom */ \"./src/ts/model/tsdom.ts\");\nvar PickerPosition = /** @class */ (function () {\n    function PickerPosition(selector, picker, defaultPlacement, arrow) {\n        this.selector = selector;\n        this.picker = picker;\n        this.defaultPlacement = defaultPlacement;\n        this.arrow = arrow;\n        var self = this;\n        var scrollParent = this.getScrollParent(this.selector.get());\n        this.processHandler = function (e) { return self.process(); };\n        this.scrollParent = tsdom_1.TsDom.select(scrollParent);\n        this.scrollParent.on('scroll', this.processHandler);\n        this.window = tsdom_1.TsDom.select(window);\n        this.window.on('scroll', this.processHandler);\n    }\n    PickerPosition.prototype.process = function () {\n        var pickerId = this.picker.attr('id'), arrow = tsdom_1.TsDom.select('#' + pickerId + ':after'), arrowWidth = arrow.width(), arrowHeight = arrow.height(), selectorWidth = this.selector.width(), selectorHeight = this.selector.height(), selectorPositionTop = this.selector.position().top, selectorPositionLeft = this.selector.position().left, pickerWidth = this.picker.width(), pickerHeight = this.picker.height(), defaultPlacement = 'bottom', result = this.defaultPlacement.split('-'), arrowBorderWidth = arrowWidth / 2;\n        if (result.length > 1) {\n            defaultPlacement = result[0];\n        }\n        else {\n            defaultPlacement = this.defaultPlacement;\n        }\n        if (defaultPlacement === 'bottom') {\n            var pickerPositionTop = selectorPositionTop + selectorHeight + arrowHeight;\n            var pickerPositionLeft = 0;\n            if ((selectorPositionLeft + pickerWidth) < tsdom_1.TsDom.select(window).width()) { // arrow left position\n                pickerPositionLeft = selectorPositionLeft;\n                this.picker\n                    .removeClass('is-arrow-right')\n                    .addClass('is-arrow-left');\n                var arrowLeftPosition = arrow.css('left');\n                var arrowAreaWidth = arrowLeftPosition + arrow.width() + Math.ceil(arrowLeftPosition / 2);\n                if (selectorWidth < arrowAreaWidth) { // centering left arrow\n                    pickerPositionLeft = pickerPositionLeft - Math.ceil((arrowLeftPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            else { // arrow right position\n                pickerPositionLeft = (selectorPositionLeft + selectorWidth) - pickerWidth;\n                this.picker\n                    .removeClass('is-arrow-left')\n                    .addClass('is-arrow-right');\n                var arrowRightPosition = arrow.css('right');\n                var arrowAreaWidth = arrowRightPosition + arrow.width() + Math.ceil(arrowRightPosition / 2);\n                if (selectorWidth < arrowAreaWidth) {\n                    // 2px is hack fix for arrow with right position\n                    pickerPositionLeft = pickerPositionLeft + 3 + ((arrowRightPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n        else if (defaultPlacement === 'top') {\n            var pickerPositionTop = selectorPositionTop - pickerHeight - arrowHeight;\n            var pickerPositionLeft = 0;\n            if ((selectorPositionLeft + pickerWidth) < tsdom_1.TsDom.select(window).width()) { // arrow left position\n                pickerPositionLeft = selectorPositionLeft;\n                this.picker.css('left', pickerPositionLeft + 'px');\n                this.picker\n                    .removeClass('is-arrow-right')\n                    .addClass('is-arrow-left');\n                var arrowLeftPosition = arrow.css('left');\n                var arrowAreaWidth = arrowLeftPosition + arrow.width() + Math.ceil(arrowLeftPosition / 2);\n                if (selectorWidth < arrowAreaWidth) { // centering left arrow\n                    pickerPositionLeft = pickerPositionLeft - Math.ceil((arrowLeftPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            else { // arrow right position\n                pickerPositionLeft = (selectorPositionLeft + selectorWidth) - pickerWidth;\n                this.picker\n                    .removeClass('is-arrow-left')\n                    .addClass('is-arrow-right');\n                var arrowRightPosition = arrow.css('right');\n                var arrowAreaWidth = arrowRightPosition + arrow.width() + Math.ceil(arrowRightPosition / 2);\n                if (selectorWidth < arrowAreaWidth) {\n                    // 2px is hack fix for arrow with right position\n                    pickerPositionLeft = pickerPositionLeft + 3 + ((arrowRightPosition + (arrowBorderWidth / 2)) - (selectorWidth / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n        else if (defaultPlacement === 'left') {\n            var pickerPositionTop = selectorPositionTop;\n            var pickerPositionLeft = selectorPositionLeft - pickerWidth - arrowWidth;\n            if ((selectorPositionTop + pickerHeight) < tsdom_1.TsDom.select(window).height()) { // arrow top position\n                this.picker\n                    .removeClass('is-arrow-bottom')\n                    .addClass('is-arrow-top');\n                var arrowTopPosition = arrow.css('top');\n                var arrowAreaHeight = arrowTopPosition + arrowHeight + Math.ceil(arrowTopPosition / 2);\n                if (selectorHeight < arrowAreaHeight) { // centering left arrow\n                    pickerPositionTop = pickerPositionTop - Math.ceil((arrowTopPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            else { // arrow bottom position\n                pickerPositionTop = (selectorPositionTop + selectorHeight) - pickerHeight;\n                this.picker\n                    .removeClass('is-arrow-top')\n                    .addClass('is-arrow-bottom');\n                var arrowBottomPosition = arrow.css('bottom');\n                var arrowAreaHeight = arrowBottomPosition + arrow.height() + Math.ceil(arrowBottomPosition / 2);\n                if (selectorHeight < arrowAreaHeight) {\n                    // 4px is hack fix for arrow with bottom position\n                    pickerPositionTop = pickerPositionTop + 4 + ((arrowBottomPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n        else if (defaultPlacement === 'right') {\n            var pickerPositionTop = selectorPositionTop;\n            var pickerPositionLeft = selectorPositionLeft + selectorWidth + arrowWidth;\n            if ((selectorPositionTop + pickerHeight) < tsdom_1.TsDom.select(window).height()) { // arrow top position\n                this.picker\n                    .removeClass('is-arrow-bottom')\n                    .addClass('is-arrow-top');\n                var arrowTopPosition = arrow.css('top');\n                var arrowAreaHeight = arrowTopPosition + arrowHeight + Math.ceil(arrowTopPosition / 2);\n                if (selectorHeight < arrowAreaHeight) { // centering left arrow\n                    pickerPositionTop = pickerPositionTop - Math.ceil((arrowTopPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            else { // arrow bottom position\n                pickerPositionTop = (selectorPositionTop + selectorHeight) - pickerHeight;\n                this.picker\n                    .removeClass('is-arrow-top')\n                    .addClass('is-arrow-bottom');\n                var arrowBottomPosition = arrow.css('bottom');\n                var arrowAreaHeight = arrowBottomPosition + arrow.height() + Math.ceil(arrowBottomPosition / 2);\n                if (selectorHeight < arrowAreaHeight) {\n                    // 4px is hack fix for arrow with bottom position\n                    pickerPositionTop = pickerPositionTop + 4 + ((arrowBottomPosition + (arrowBorderWidth / 2)) - (selectorHeight / 2));\n                }\n            }\n            this.picker.css('top', pickerPositionTop + 'px');\n            this.picker.css('left', pickerPositionLeft + 'px');\n        }\n    };\n    PickerPosition.prototype.destroy = function () {\n        this.scrollParent.off('scroll');\n        this.window.off('scroll');\n    };\n    PickerPosition.prototype.getScrollParent = function (node) {\n        var regex = /(auto|scroll)/;\n        var parents = function (_node, ps) {\n            if (_node.parentNode === null) {\n                return ps;\n            }\n            return parents(_node.parentNode, ps.concat([_node]));\n        };\n        var style = function (_node, prop) { return getComputedStyle(_node, null).getPropertyValue(prop); };\n        var overflow = function (_node) { return style(_node, 'overflow') + style(_node, 'overflow-y') + style(_node, 'overflow-x'); };\n        var scroll = function (_node) { return regex.test(overflow(_node)); };\n        /* eslint-disable consistent-return */\n        var scrollParent = function (_node) {\n            if (!(_node instanceof HTMLElement || _node instanceof SVGElement)) {\n                return;\n            }\n            var ps = parents(_node.parentNode, []);\n            for (var i = 0; i < ps.length; i += 1) {\n                if (scroll(ps[i])) {\n                    return ps[i];\n                }\n            }\n            return document.scrollingElement || document.documentElement;\n        };\n        return scrollParent(node);\n    };\n    return PickerPosition;\n}());\nexports.PickerPosition = PickerPosition;\n\n\n//# sourceURL=webpack://ColorPicker.Palette/./src/ts/model/picker-position.ts?");

/***/ }),

/***/ "./src/ts/model/tsdom.ts":
/*!*******************************!*\
  !*** ./src/ts/model/tsdom.ts ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar TsDom = /** @class */ (function () {\n    /**\n     * Initialize selector\n     *\n     * @param {any | string} selector\n     * @param {HTMLElement | Document} context\n     */\n    function TsDom(selector, context) {\n        // Nodes collection array\n        this.nodes = [];\n        /**\n         * Pseudo selector for current node\n         *\n         * @type {string}\n         */\n        this.pseudoSelector = '';\n        this.callbacks = {};\n        if (!context) {\n            context = document;\n        }\n        if (typeof selector === 'string') {\n            if (selector[0] === '<' && selector[selector.length - 1] === \">\") {\n                this.nodes = [TsDom.createNode(selector)];\n            }\n            else {\n                if (selector.search(/(:before|:after)$/gi) !== -1) {\n                    var found = selector.match(/(:before|:after)$/gi);\n                    selector = selector.split(found[0])[0];\n                    this.pseudoSelector = found[0];\n                }\n                // Query DOM\n                this.nodes = [].slice.call(context.querySelectorAll(selector));\n            }\n        }\n        else if (selector instanceof NodeList) {\n            this.nodes = selector.length > 1 ? [].slice.call(selector) : [selector];\n        }\n        else if (selector instanceof HTMLDocument || selector instanceof Window || selector instanceof HTMLElement) {\n            this.nodes = [selector];\n        }\n    }\n    TsDom.select = function (selector, context) {\n        return new TsDom(selector, context);\n    };\n    TsDom.create = function (nodeName) {\n        return new TsDom(TsDom.createNode(nodeName));\n    };\n    TsDom.prototype.attr = function (attrName, attrValue) {\n        if (attrValue != undefined) {\n            this.each(this.nodes, function (node) {\n                node.setAttribute(attrName, attrValue);\n            });\n            return this;\n        }\n        return this.getLastNode().getAttribute(attrName);\n    };\n    /**\n     * Append content to nodes\n     *\n     * @param {HTMLElement} content\n     */\n    TsDom.prototype.append = function (content) {\n        var element;\n        if (content instanceof TsDom) {\n            element = content.get();\n        }\n        else {\n            element = content;\n        }\n        this.each(this.nodes, function (node) {\n            node.appendChild(element);\n        });\n        return this;\n    };\n    TsDom.prototype.parent = function () {\n        return new TsDom(this.getLastNode().parentNode);\n    };\n    /**\n     * Iteration per elements\n     *\n     * @param {HTMLElement[]} nodes\n     * @param {Function} callback\n     * @returns {TsDom}\n     */\n    TsDom.prototype.each = function (nodes, callback) {\n        if (nodes instanceof Function) {\n            callback = nodes;\n            nodes = this.nodes;\n        }\n        for (var i = 0; i < nodes.length; i++) {\n            callback.call(this.nodes[i], this.nodes[i], i);\n        }\n        return this;\n    };\n    TsDom.prototype.hasClass = function (className) {\n        return this.getLastNode().classList.contains(className);\n    };\n    /**\n     * Add css classes to element\n     *\n     * @param {string} className\n     * @returns {TsDom}\n     */\n    TsDom.prototype.addClass = function (className) {\n        if (className) {\n            var cssClasses_1 = className.split(' ');\n            this.each(this.nodes, function (node) {\n                for (var classIndex in cssClasses_1) {\n                    node.classList.add(cssClasses_1[classIndex]);\n                }\n            });\n        }\n        return this;\n    };\n    /**\n     * Remove css classes from element\n     *\n     * @param {string} className\n     * @returns {TsDom}\n     */\n    TsDom.prototype.removeClass = function (className) {\n        var cssClasses = className.split(' ');\n        this.each(this.nodes, function (node) {\n            for (var classIndex in cssClasses) {\n                node.classList.remove(cssClasses[classIndex]);\n            }\n        });\n        return this;\n    };\n    TsDom.prototype.find = function (selector) {\n        return new TsDom(selector, this.getLastNode());\n    };\n    TsDom.prototype.trigger = function (eventName, detail) {\n        var event = new CustomEvent(eventName, {\n            detail: detail\n        });\n        this.each(this.nodes, function (node) {\n            node.dispatchEvent(event);\n        });\n        return this;\n    };\n    TsDom.prototype.text = function (text) {\n        this.each(this.nodes, function (node) {\n            node.innerText = text;\n        });\n        return this;\n    };\n    /**\n     * Set ot Get css property from element\n     *\n     * @param styleName\n     * @param value\n     * @returns {any}\n     */\n    TsDom.prototype.css = function (styleName, value) {\n        if (typeof value == 'undefined') {\n            var node = this.getLastNode();\n            var result = null;\n            styleName = TsDom.convertToJsProperty(styleName);\n            if ((typeof node.getBoundingClientRect === \"function\") && !this.pseudoSelector) {\n                result = node.getBoundingClientRect()[styleName];\n            }\n            if (!result) {\n                var value_1 = getComputedStyle(node, this.pseudoSelector)[styleName];\n                if (value_1.search('px')) {\n                    result = parseInt(value_1, 10);\n                }\n            }\n            if (isNaN(result)) {\n                throw 'Undefined css property: ' + styleName;\n            }\n            return result;\n        }\n        else {\n            if (this.nodes.length > 1) {\n                this.each(this.nodes, function (node) {\n                    node.style[styleName] = value;\n                });\n            }\n            else {\n                this.nodes[0].style[styleName] = value;\n            }\n        }\n        return this;\n    };\n    /**\n     * Add event listener to element\n     *\n     * @param {string} eventName\n     * @param {Function} callback\n     * @returns {TsDom}\n     */\n    TsDom.prototype.on = function (eventName, callback) {\n        var _this = this;\n        this.each(this.nodes, function (node) {\n            var callbackFn = function (e) {\n                callback.call(node, e);\n            };\n            _this.callbacks[eventName] = callbackFn;\n            node.addEventListener(eventName, callbackFn);\n        });\n        return this;\n    };\n    TsDom.prototype.off = function (eventName) {\n        var callbackFn = this.callbacks[eventName];\n        this.each(this.nodes, function (node) {\n            node.removeEventListener(eventName, callbackFn, false);\n        });\n        return this;\n    };\n    TsDom.prototype.val = function (value) {\n        if (typeof value === 'undefined') {\n            return this.getLastNode().value;\n        }\n        this.each(this.nodes, function (node) {\n            node.value = value;\n        });\n        return this;\n    };\n    /**\n     * Check node type\n     *\n     * @param {string} tagName\n     * @returns {boolean}\n     */\n    TsDom.prototype.is = function (tagName) {\n        return this.getLastNode().tagName.toLowerCase() === tagName;\n    };\n    TsDom.prototype.get = function (index) {\n        if (index === void 0) { index = 0; }\n        return this.nodes[index];\n    };\n    TsDom.prototype.length = function () {\n        return this.nodes.length;\n    };\n    TsDom.prototype.hide = function () {\n        this.each(this.nodes, function (node) {\n            TsDom.select(node).css('display', 'none');\n        });\n        return this;\n    };\n    TsDom.prototype.show = function () {\n        this.each(this.nodes, function (node) {\n            TsDom.select(node).css('display', '');\n        });\n        return this;\n    };\n    TsDom.prototype.empty = function () {\n        this.each(this.nodes, function (node) {\n            TsDom.select(node).get().innerHTML = '';\n        });\n        return this;\n    };\n    TsDom.prototype.remove = function () {\n        this.each(this.nodes, function (node) {\n            node.remove();\n        });\n    };\n    TsDom.prototype.insertBefore = function (data) {\n        var element = this.resolveElement(data);\n        this.each(this.nodes, function (node) {\n            node.parentNode.insertBefore(element, element.previousSibling);\n        });\n        return this;\n    };\n    TsDom.prototype.insertAfter = function (contents) {\n        var element = this.resolveElement(contents);\n        this.each(this.nodes, function (node) {\n            node.parentNode.insertBefore(element, node.nextSibling);\n        });\n        return this;\n    };\n    TsDom.prototype.resolveElement = function (contents) {\n        var element;\n        if (TsDom.isHtml(contents)) {\n            element = TsDom.createNode(contents);\n        }\n        else if (contents instanceof HTMLElement) {\n            element = contents;\n        }\n        else if (contents instanceof TsDom) {\n            element = contents.get();\n        }\n        return element;\n    };\n    TsDom.prototype.closest = function (selector) {\n        return TsDom.select(this.getLastNode().closest(selector));\n    };\n    TsDom.prototype.data = function (dataName) {\n        return this.attr('data-' + dataName);\n    };\n    TsDom.prototype.width = function (value) {\n        if (value !== undefined) {\n            this.css('width', value);\n            return this;\n        }\n        if (this.getLastNode() === window) {\n            return parseInt(this.getLastNode().innerWidth, 10);\n        }\n        return parseInt(this.css('width'), 10);\n    };\n    TsDom.prototype.height = function (value) {\n        if (value !== undefined) {\n            this.css('height', value);\n            return this;\n        }\n        if (this.getLastNode() === window) {\n            return parseInt(this.getLastNode().innerHeight, 10);\n        }\n        return parseInt(this.css('height'), 10);\n    };\n    TsDom.prototype.position = function () {\n        return {\n            top: Number(this.getLastNode().getBoundingClientRect().top),\n            bottom: Number(this.getLastNode().getBoundingClientRect().bottom),\n            left: Number(this.getLastNode().getBoundingClientRect().left),\n            right: Number(this.getLastNode().getBoundingClientRect().right),\n        };\n    };\n    TsDom.prototype.offset = function () {\n        return {\n            top: Number(this.getLastNode().offsetTop),\n            left: Number(this.getLastNode().offsetLeft)\n        };\n    };\n    TsDom.createNode = function (nodeName) {\n        if (nodeName[0] === '<' && nodeName[nodeName.length - 1] === \">\") {\n            var element = document.createElement('div');\n            element.innerHTML = nodeName;\n            return element.firstChild;\n        }\n        else {\n            return document.createElement(nodeName);\n        }\n    };\n    TsDom.isHtml = function (text) {\n        return text[0] === '<' && text[text.length - 1] === \">\";\n    };\n    /**\n     * Make css property notation to javascript property notation\n     *\n     * @param {string} propertyName\n     * @returns {string}\n     */\n    TsDom.convertToJsProperty = function (propertyName) {\n        propertyName = propertyName.toLowerCase().replace('-', ' ');\n        propertyName = propertyName.replace(/(^| )(\\w)/g, function (x) {\n            return x.toUpperCase();\n        });\n        propertyName = propertyName.charAt(0).toLowerCase() + propertyName.slice(1);\n        return propertyName.replace(' ', '');\n    };\n    /**\n     *\n     * @returns {any}\n     */\n    TsDom.prototype.getLastNode = function () {\n        return this.nodes[this.nodes.length - 1];\n    };\n    return TsDom;\n}());\nexports.TsDom = TsDom;\n\n\n//# sourceURL=webpack://ColorPicker.Palette/./src/ts/model/tsdom.ts?");

/***/ }),

/***/ "./src/ts/palette-picker.ts":
/*!**********************************!*\
  !*** ./src/ts/palette-picker.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar colorpicker_1 = __webpack_require__(/*! ./model/colorpicker */ \"./src/ts/model/colorpicker.ts\");\nvar tsdom_1 = __webpack_require__(/*! ./model/tsdom */ \"./src/ts/model/tsdom.ts\");\nvar color_1 = __webpack_require__(/*! ./model/color */ \"./src/ts/model/color.ts\");\nvar PalettePicker = /** @class */ (function (_super) {\n    __extends(PalettePicker, _super);\n    function PalettePicker() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    PalettePicker.prototype.buildLayout = function () {\n        var _this = this;\n        this.picker = tsdom_1.TsDom.create('div')\n            .addClass('colorpicker')\n            .addClass('colorpicker-palette')\n            .attr('id', this.id);\n        if (this.options.palette.length === 1) {\n            this.picker.addClass('colorpicker-palette--plain');\n        }\n        this.options.palette.forEach(function (palette) {\n            var colors = tsdom_1.TsDom.create('div').addClass('colorpicker-palette__colors'); // colors row\n            palette.descendants.forEach(function (child) {\n                var color = tsdom_1.TsDom.create('div')\n                    .addClass('colorpicker-palette__color')\n                    .css('background-color', child.color)\n                    .attr('data-picker-color', child.color.toLowerCase());\n                if (child.color.toLowerCase() === '#ffffff') {\n                    color.addClass('colorpicker-palette__color--white');\n                }\n                if (child.color.toLowerCase() === _this.options.color.toLowerCase()) {\n                    color.addClass('is-checked');\n                }\n                colors.append(color);\n            });\n            _this.picker.append(colors);\n        });\n    };\n    PalettePicker.prototype.bindEvents = function () {\n        var _this = this;\n        this.picker.on('click', function (e) {\n            var srcElement = tsdom_1.TsDom.select(e.target);\n            if (srcElement.hasClass('colorpicker-palette__color')) {\n                _this.picker.find('.colorpicker-palette__color').removeClass('is-checked');\n                srcElement.addClass('is-checked');\n                _this.options.color = srcElement.data('picker-color');\n                _this.dispatchColorChangedEvent();\n            }\n        });\n    };\n    PalettePicker.prototype.getColor = function () {\n        return color_1.Color.process(this.options.color).format(this.options.format);\n    };\n    PalettePicker.prototype.getColorObject = function () {\n        return color_1.Color.process(this.options.color);\n    };\n    PalettePicker.prototype.update = function () {\n        this.picker.find('.colorpicker-palette__color').removeClass('is-checked');\n        this.picker.find('[data-picker-color=\"' + this.options.color.toLowerCase() + '\"]').addClass('is-checked');\n    };\n    PalettePicker.prototype.getPickerCssClassName = function () {\n        return 'colorpicker-palette';\n    };\n    PalettePicker.prototype.getDefaultOptions = function () {\n        return {\n            color: '#000000',\n            format: 'hex',\n            palette: [\n                {\n                    descendants: [\n                        {\n                            color: '#000000'\n                        },\n                        {\n                            color: '#454545'\n                        },\n                        {\n                            color: '#666666'\n                        },\n                        {\n                            color: '#989898'\n                        },\n                        {\n                            color: '#B6B6B6'\n                        },\n                        {\n                            color: '#CBCBCB'\n                        },\n                        {\n                            color: '#D8D8D8'\n                        },\n                        {\n                            color: '#EEEEEF'\n                        },\n                        {\n                            color: '#F3F3F3'\n                        },\n                        {\n                            color: '#ffffff'\n                        }\n                    ]\n                },\n                {\n                    descendants: [\n                        {\n                            color: '#970205'\n                        },\n                        {\n                            color: '#FF0309'\n                        },\n                        {\n                            color: '#FF980C'\n                        },\n                        {\n                            color: '#FFFF11'\n                        },\n                        {\n                            color: '#00ff00'\n                        },\n                        {\n                            color: '#1EFFFF'\n                        },\n                        {\n                            color: '#4985E7'\n                        },\n                        {\n                            color: '#150AFF'\n                        },\n                        {\n                            color: '#970AFF'\n                        },\n                        {\n                            color: '#FF0AFF'\n                        }\n                    ]\n                },\n                {\n                    descendants: [\n                        {\n                            color: '#E6B7AE'\n                        },\n                        {\n                            color: '#F4CBCB'\n                        },\n                        {\n                            color: '#FCE4CC'\n                        },\n                        {\n                            color: '#FFF2CB'\n                        },\n                        {\n                            color: '#D8E9D2'\n                        },\n                        {\n                            color: '#CFDFE2'\n                        },\n                        {\n                            color: '#C7D9F8'\n                        },\n                        {\n                            color: '#CDE1F3'\n                        },\n                        {\n                            color: '#D8D1E8'\n                        },\n                        {\n                            color: '#EAD0DB'\n                        },\n                    ]\n                },\n                {\n                    descendants: [\n                        {\n                            color: '#DD7D6B'\n                        },\n                        {\n                            color: '#EA9898'\n                        },\n                        {\n                            color: '#F9CA9B'\n                        },\n                        {\n                            color: '#FFE498'\n                        },\n                        {\n                            color: '#B4D6A7'\n                        },\n                        {\n                            color: '#A0C3C8'\n                        },\n                        {\n                            color: '#A2C1F4'\n                        },\n                        {\n                            color: '#9DC4E7'\n                        },\n                        {\n                            color: '#B2A6D5'\n                        },\n                        {\n                            color: '#D4A5BC'\n                        }\n                    ]\n                },\n                {\n                    descendants: [\n                        {\n                            color: '#CC432A'\n                        },\n                        {\n                            color: '#E06666'\n                        },\n                        {\n                            color: '#F6B06B'\n                        },\n                        {\n                            color: '#FFD866'\n                        },\n                        {\n                            color: '#91C37C'\n                        },\n                        {\n                            color: '#75A4AD'\n                        },\n                        {\n                            color: '#6B9DEA'\n                        },\n                        {\n                            color: '#6DA7DB'\n                        },\n                        {\n                            color: '#8D7BC2'\n                        },\n                        {\n                            color: '#C17A9F'\n                        }\n                    ]\n                },\n                {\n                    descendants: [\n                        {\n                            color: '#A52206'\n                        },\n                        {\n                            color: '#CC0207'\n                        },\n                        {\n                            color: '#E6903B'\n                        },\n                        {\n                            color: '#F1C136'\n                        },\n                        {\n                            color: '#69A650'\n                        },\n                        {\n                            color: '#46808D'\n                        },\n                        {\n                            color: '#3C77D7'\n                        },\n                        {\n                            color: '#3D84C5'\n                        },\n                        {\n                            color: '#674FA5'\n                        },\n                        {\n                            color: '#A54E78'\n                        }\n                    ]\n                },\n                {\n                    descendants: [\n                        {\n                            color: '#842514'\n                        },\n                        {\n                            color: '#980205'\n                        },\n                        {\n                            color: '#B35F10'\n                        },\n                        {\n                            color: '#BE8F0B'\n                        },\n                        {\n                            color: '#3A7523'\n                        },\n                        {\n                            color: '#18505C'\n                        },\n                        {\n                            color: '#1156CB'\n                        },\n                        {\n                            color: '#0E5493'\n                        },\n                        {\n                            color: '#382274'\n                        },\n                        {\n                            color: '#733855'\n                        }\n                    ]\n                },\n                {\n                    descendants: [\n                        {\n                            color: '#5C1603'\n                        },\n                        {\n                            color: '#660104'\n                        },\n                        {\n                            color: '#78410D'\n                        },\n                        {\n                            color: '#7E6007'\n                        },\n                        {\n                            color: '#2B4F1A'\n                        },\n                        {\n                            color: '#13373F'\n                        },\n                        {\n                            color: '#204786'\n                        },\n                        {\n                            color: '#0D3A63'\n                        },\n                        {\n                            color: '#25194E'\n                        },\n                        {\n                            color: '#4E1833'\n                        }\n                    ]\n                }\n            ],\n            hideAfterColorChange: true\n        };\n    };\n    return PalettePicker;\n}(colorpicker_1.ColorPicker));\nmodule.exports = PalettePicker;\n\n\n//# sourceURL=webpack://ColorPicker.Palette/./src/ts/palette-picker.ts?");

/***/ })

/******/ });
});